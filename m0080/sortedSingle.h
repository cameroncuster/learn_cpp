/** **************************************************************************
 * @file    
 *
 * @brief   The declaration of the singly linked list for a list that
 *          is sorted.
 ****************************************************************************/
#include <iostream>
#include <string>
using namespace std;
/*****************************************************************************
 * do not edit this file
 ****************************************************************************/

/** **************************************************************************
 * @class   sortedSingle
 *
 * @brief   A sorted singly linked list of integers.
 ****************************************************************************/
template <class TY>
class sortedSingle
{
    private:

    /** 
     * @brief  the storage container for each item in the list 
     */
    struct node
    {
        TY theItem;    /*!< the item */
        node *next;     /*!< pointer to the remaining nodes in list */
    };
    node *headptr;      /*!< The location of the first node in the list */

    public:

    // do not write. under any circumstances do not write
    sortedSingle( sortedSingle<TY> &l );

    // file sortedSinglea.cpp
    sortedSingle( );
    ~sortedSingle( );
    bool find( TY item );
    int retrievePosition( TY item );
    int size( );
    bool empty( );

    // file sortedSingleb.cpp
    bool insert( TY item );
    void print( ostream &out, string seperator = ", " );

    // file sortedSinglec.cpp
    bool remove( TY item );
    void clear( );

    // template <class TY>
    class iterator : public std::iterator<std::forward_iterator_tag, TY>
    {
        private:
        node *itptr;

        public:
        iterator( node *ptr );
        iterator( const iterator &it );
        iterator &operator++( );
        iterator operator++( int );

        int &operator*( ) const;
        int *operator->( ) const;
        bool operator==( const iterator &x ) const;
        bool operator!=( const iterator &x ) const;
    };
    iterator begin( );
    iterator end( );
};